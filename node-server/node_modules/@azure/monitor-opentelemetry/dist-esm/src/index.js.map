{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAuB,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AACzE,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,OAAO,EAAwB,MAAM,yBAAyB,CAAC;AACxE,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,MAAM,IAAI,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EACL,mCAAmC,EACnC,gCAAgC,EAIhC,gBAAgB,EAChB,wBAAwB,GACzB,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAO1D,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,GAAG,mCAAmC,CAAC;AAElF,IAAI,GAAY,CAAC;AACjB,IAAI,gBAA8C,CAAC;AAEnD;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,OAA0C;IACxE,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;IAE3C,IAAI,MAAM,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;QAC3C,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,qBAAqB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAChD,gFAAgF;IAChF,OAAO,CAAC,OAAO,EAAE,CAAC;IAClB,KAAK,CAAC,OAAO,EAAE,CAAC;IAChB,IAAI,CAAC,OAAO,EAAE,CAAC;IAEf,2BAA2B;IAC3B,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;IAChD,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAC7D,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAEzD,MAAM,gBAAgB,GAAG,YAAY;SAClC,mBAAmB,EAAE;SACrB,MAAM,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAE5C,+BAA+B;IAC/B,MAAM,SAAS,GAAkC;QAC/C,mBAAmB,EAAE,IAAI;QACzB,YAAY,EAAE,aAAa,CAAC,eAAe,EAAE;QAC7C,KAAK,EAAE,aAAa,CAAC,QAAQ,EAAE;QAC/B,gBAAgB,EAAE,gBAAgB;QAClC,kBAAkB,EAAE,UAAU,CAAC,0BAA0B,EAAE;QAC3D,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE;QAClC,cAAc,EAAE,CAAC,YAAY,CAAC,4BAA4B,EAAE,CAAC;KAC9D,CAAC;IACF,GAAG,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC;IAC7B,YAAY,EAAE,CAAC;IACf,GAAG,CAAC,KAAK,EAAE,CAAC;IAEZ,oEAAoE;IACpE,iEAAiE;IAEjE,kEAAkE;IAClE,IAAI,cAAc,GAAoB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,KAAI,EAAE,CAAC;IACpE,sCAAsC;IACtC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAE1D,kEAAkE;IAClE,IAAI,mBAAmB,GAAyB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,mBAAmB,KAAI,EAAE,CAAC;IACnF,sCAAsC;IACtC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,0BAA0B,EAAE,CAAC,CAAC;IAElE,IAAI,CAAC;QACH,MAAM,cAAc,GAClB,KAAK,CAAC,iBAAiB,EACxB,CAAC,WAAW,EAAwB,CAAC;QACtC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YACvC,cAAc,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,cAAc,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;IAC/F,CAAC;IACD,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAoB,CAAC;QAC/D,mBAAmB,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,EAAE;YACjD,WAAW,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,cAAc,CAAC,WAAW,EAAE,CAAC,KAAK,CAChC,sDAAsD,EACtD,KAAK,CACN,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB;IAClC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,EAAE,CAAC;IAC5B,OAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,EAAE,CAAC;AACzB,CAAC;AAED,SAAS,qBAAqB,CAAC,MAAsB,EAAE,gBAAmC;;IACxF,IAAI,qBAAqB,GAAG,wBAAwB,CAAC,IAAI,CAAC;IAC1D,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,QAAQ,0CAAE,OAAO,EAAE,CAAC;QACrD,qBAAqB,IAAI,wBAAwB,CAAC,kBAAkB,CAAC;IACvE,CAAC;IACD,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,OAAO,0CAAE,OAAO,EAAE,CAAC;QACpD,qBAAqB,IAAI,wBAAwB,CAAC,OAAO,CAAC;IAC5D,CAAC;IACD,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,KAAK,0CAAE,OAAO,EAAE,CAAC;QAClD,qBAAqB,IAAI,wBAAwB,CAAC,KAAK,CAAC;IAC1D,CAAC;IACD,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,UAAU,0CAAE,OAAO,EAAE,CAAC;QACvD,qBAAqB,IAAI,wBAAwB,CAAC,QAAQ,CAAC;IAC7D,CAAC;IACD,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,KAAK,0CAAE,OAAO,EAAE,CAAC;QAClD,qBAAqB,IAAI,wBAAwB,CAAC,KAAK,CAAC;IAC1D,CAAC;IACD,IAAI,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,MAAM,0CAAE,OAAO,EAAE,CAAC;QACnD,qBAAqB,IAAI,wBAAwB,CAAC,MAAM,CAAC;IAC3D,CAAC;IAED,IAAI,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC;IAC1C,aAAa,IAAI,gBAAgB,CAAC,MAAM,CAAC;IAEzC,IAAI,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,aAAa,EAAE,EAAE,CAAC;QACtC,aAAa,IAAI,gBAAgB,CAAC,kBAAkB,CAAC;IACvD,CAAC;IAED,IAAI,CAAC;QACH,MAAM,qBAAqB,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,EAAE,CAAC;YAClC,aAAa,IAAI,qBAAqB,CAAC;QACzC,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC7D,eAAe,EAAE,qBAAqB;YACtC,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,cAAc,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;IAC9E,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ProxyTracerProvider, metrics, trace } from \"@opentelemetry/api\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport { NodeSDK, NodeSDKConfiguration } from \"@opentelemetry/sdk-node\";\nimport { InternalConfig } from \"./shared/config\";\nimport { MetricHandler } from \"./metrics\";\nimport { TraceHandler } from \"./traces/handler\";\nimport { Logger as InternalLogger } from \"./shared/logging\";\nimport { LogHandler } from \"./logs\";\nimport {\n  AZURE_MONITOR_OPENTELEMETRY_VERSION,\n  AZURE_MONITOR_STATSBEAT_FEATURES,\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n  BrowserSdkLoaderOptions,\n  StatsbeatFeature,\n  StatsbeatInstrumentation,\n} from \"./types\";\nimport { BrowserSdkLoader } from \"./browserSdkLoader/browserSdkLoader\";\nimport { setSdkPrefix } from \"./metrics/quickpulse/utils\";\nimport { SpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport { LogRecordProcessor, LoggerProvider } from \"@opentelemetry/sdk-logs\";\nimport { NodeTracerProvider } from \"@opentelemetry/sdk-trace-node\";\n\nexport { AzureMonitorOpenTelemetryOptions, InstrumentationOptions, BrowserSdkLoaderOptions };\n\nprocess.env[\"AZURE_MONITOR_DISTRO_VERSION\"] = AZURE_MONITOR_OPENTELEMETRY_VERSION;\n\nlet sdk: NodeSDK;\nlet browserSdkLoader: BrowserSdkLoader | undefined;\n\n/**\n * Initialize Azure Monitor Distro\n * @param options Azure Monitor OpenTelemetry Options\n */\nexport function useAzureMonitor(options?: AzureMonitorOpenTelemetryOptions) {\n  const config = new InternalConfig(options);\n\n  if (config.browserSdkLoaderOptions.enabled) {\n    browserSdkLoader = new BrowserSdkLoader(config);\n  }\n  _setStatsbeatFeatures(config, browserSdkLoader);\n  // Remove global providers in OpenTelemetry, these would be overriden if present\n  metrics.disable();\n  trace.disable();\n  logs.disable();\n\n  // Create internal handlers\n  const metricHandler = new MetricHandler(config);\n  const traceHandler = new TraceHandler(config, metricHandler);\n  const logHandler = new LogHandler(config, metricHandler);\n\n  const instrumentations = traceHandler\n    .getInstrumentations()\n    .concat(logHandler.getInstrumentations());\n\n  // Initialize OpenTelemetry SDK\n  const sdkConfig: Partial<NodeSDKConfiguration> = {\n    autoDetectResources: true,\n    metricReader: metricHandler.getMetricReader(),\n    views: metricHandler.getViews(),\n    instrumentations: instrumentations,\n    logRecordProcessor: logHandler.getAzureLogRecordProcessor(),\n    resource: config.resource,\n    sampler: traceHandler.getSampler(),\n    spanProcessors: [traceHandler.getAzureMonitorSpanProcessor()],\n  };\n  sdk = new NodeSDK(sdkConfig);\n  setSdkPrefix();\n  sdk.start();\n\n  // TODO: Send processors as NodeSDK config once arrays are supported\n  // https://github.com/open-telemetry/opentelemetry-js/issues/4451\n\n  // Add extra SpanProcessors, MetricReaders and LogRecordProcessors\n  let spanProcessors: SpanProcessor[] = options?.spanProcessors || [];\n  // Add batch processor as the last one\n  spanProcessors.push(traceHandler.getBatchSpanProcessor());\n\n  // Add extra SpanProcessors, MetricReaders and LogRecordProcessors\n  let logRecordProcessors: LogRecordProcessor[] = options?.logRecordProcessors || [];\n  // Add batch processor as the last one\n  logRecordProcessors.push(logHandler.getBatchLogRecordProcessor());\n\n  try {\n    const tracerProvider = (\n      trace.getTracerProvider() as ProxyTracerProvider\n    ).getDelegate() as NodeTracerProvider;\n    spanProcessors.forEach((spanProcessor) => {\n      tracerProvider.addSpanProcessor(spanProcessor);\n    });\n  } catch (error) {\n    InternalLogger.getInstance().error(\"Failed to add SpanProcessors to TracerProvider.\", error);\n  }\n  try {\n    const logProvider = logs.getLoggerProvider() as LoggerProvider;\n    logRecordProcessors.forEach((logRecordProcessor) => {\n      logProvider.addLogRecordProcessor(logRecordProcessor);\n    });\n  } catch (error) {\n    InternalLogger.getInstance().error(\n      \"Failed to add LogRecordProcessors to LoggerProvider.\",\n      error,\n    );\n  }\n}\n\n/**\n * Shutdown Azure Monitor Open Telemetry Distro\n * @see https://github.com/open-telemetry/opentelemetry-js/blob/0229434cb5a3179f63c021105f36270ae7897929/experimental/packages/opentelemetry-sdk-node/src/sdk.ts#L398\n */\nexport function shutdownAzureMonitor(): Promise<void> {\n  browserSdkLoader?.dispose();\n  return sdk?.shutdown();\n}\n\nfunction _setStatsbeatFeatures(config: InternalConfig, browserSdkLoader?: BrowserSdkLoader) {\n  let instrumentationBitMap = StatsbeatInstrumentation.NONE;\n  if (config.instrumentationOptions?.azureSdk?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.AZURE_CORE_TRACING;\n  }\n  if (config.instrumentationOptions?.mongoDb?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.MONGODB;\n  }\n  if (config.instrumentationOptions?.mySql?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.MYSQL;\n  }\n  if (config.instrumentationOptions?.postgreSql?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.POSTGRES;\n  }\n  if (config.instrumentationOptions?.redis?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.REDIS;\n  }\n  if (config.instrumentationOptions?.bunyan?.enabled) {\n    instrumentationBitMap |= StatsbeatInstrumentation.BUNYAN;\n  }\n\n  let featureBitMap = StatsbeatFeature.NONE;\n  featureBitMap |= StatsbeatFeature.DISTRO;\n\n  if (browserSdkLoader?.isInitialized()) {\n    featureBitMap |= StatsbeatFeature.BROWSER_SDK_LOADER;\n  }\n\n  try {\n    const currentFeaturesBitMap = Number(process.env[AZURE_MONITOR_STATSBEAT_FEATURES]);\n    if (!isNaN(currentFeaturesBitMap)) {\n      featureBitMap |= currentFeaturesBitMap;\n    }\n    process.env[AZURE_MONITOR_STATSBEAT_FEATURES] = JSON.stringify({\n      instrumentation: instrumentationBitMap,\n      feature: featureBitMap,\n    });\n  } catch (error) {\n    InternalLogger.getInstance().error(\"Failed call to JSON.stringify.\", error);\n  }\n}\n"]}