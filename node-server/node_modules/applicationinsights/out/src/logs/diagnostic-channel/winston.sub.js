"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispose = exports.enable = void 0;
const api_logs_1 = require("@opentelemetry/api-logs");
const diagnostic_channel_1 = require("diagnostic-channel");
let logger;
let logSendingLevel;
const winstonToAILevelMap = {
    syslog(og) {
        const map = {
            emerg: api_logs_1.SeverityNumber.FATAL3,
            alert: api_logs_1.SeverityNumber.FATAL2,
            crit: api_logs_1.SeverityNumber.FATAL,
            error: api_logs_1.SeverityNumber.ERROR,
            warning: api_logs_1.SeverityNumber.WARN,
            notice: api_logs_1.SeverityNumber.INFO2,
            info: api_logs_1.SeverityNumber.INFO,
            debug: api_logs_1.SeverityNumber.DEBUG,
        };
        return map[og] === undefined ? api_logs_1.SeverityNumber.INFO : map[og];
    },
    npm(og) {
        const map = {
            error: api_logs_1.SeverityNumber.ERROR,
            warn: api_logs_1.SeverityNumber.WARN,
            info: api_logs_1.SeverityNumber.INFO,
            http: api_logs_1.SeverityNumber.DEBUG3,
            verbose: api_logs_1.SeverityNumber.DEBUG2,
            debug: api_logs_1.SeverityNumber.DEBUG,
            silly: api_logs_1.SeverityNumber.TRACE,
        };
        return map[og] === undefined ? api_logs_1.SeverityNumber.INFO : map[og];
    },
    unknown(og) {
        return api_logs_1.SeverityNumber.INFO;
    },
};
const subscriber = (event) => {
    const severity = winstonToAILevelMap[event.data.levelKind](event.data.level);
    if (logSendingLevel <= severity) {
        const message = event.data.message.toString();
        let logRecord = {
            body: message,
            severityNumber: severity,
            attributes: event.data.meta
        };
        logger.emit(logRecord);
    }
};
function enable(config) {
    if (config === null || config === void 0 ? void 0 : config.enabled) {
        logger = api_logs_1.logs.getLogger("ApplicationInsightsConsoleLogger");
        logSendingLevel = config.logSendingLevel || api_logs_1.SeverityNumber.UNSPECIFIED;
        diagnostic_channel_1.channel.subscribe("winston", subscriber, diagnostic_channel_1.trueFilter);
    }
}
exports.enable = enable;
function dispose() {
    diagnostic_channel_1.channel.unsubscribe("winston", subscriber);
}
exports.dispose = dispose;
//# sourceMappingURL=winston.sub.js.map