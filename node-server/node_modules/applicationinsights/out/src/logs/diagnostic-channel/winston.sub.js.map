{"version":3,"file":"winston.sub.js","sourceRoot":"","sources":["../../../../src/logs/diagnostic-channel/winston.sub.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,oFAAoF;;;AAEpF,sDAAkF;AAClF,2DAAyE;AAKzE,IAAI,MAAc,CAAC;AACnB,IAAI,eAA+B,CAAC;AAEpC,MAAM,mBAAmB,GAA8C;IACnE,MAAM,CAAC,EAAU;QACb,MAAM,GAAG,GAA8B;YACnC,KAAK,EAAE,yBAAc,CAAC,MAAM;YAC5B,KAAK,EAAE,yBAAc,CAAC,MAAM;YAC5B,IAAI,EAAE,yBAAc,CAAC,KAAK;YAC1B,KAAK,EAAE,yBAAc,CAAC,KAAK;YAC3B,OAAO,EAAE,yBAAc,CAAC,IAAI;YAC5B,MAAM,EAAE,yBAAc,CAAC,KAAK;YAC5B,IAAI,EAAE,yBAAc,CAAC,IAAI;YACzB,KAAK,EAAE,yBAAc,CAAC,KAAK;SAC9B,CAAC;QAEF,OAAO,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,yBAAc,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IACD,GAAG,CAAC,EAAU;QACV,MAAM,GAAG,GAA8B;YACnC,KAAK,EAAE,yBAAc,CAAC,KAAK;YAC3B,IAAI,EAAE,yBAAc,CAAC,IAAI;YACzB,IAAI,EAAE,yBAAc,CAAC,IAAI;YACzB,IAAI,EAAE,yBAAc,CAAC,MAAM;YAC3B,OAAO,EAAE,yBAAc,CAAC,MAAM;YAC9B,KAAK,EAAE,yBAAc,CAAC,KAAK;YAC3B,KAAK,EAAE,yBAAc,CAAC,KAAK;SAC9B,CAAC;QAEF,OAAO,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,yBAAc,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IACD,OAAO,CAAC,EAAU;QACd,OAAO,yBAAc,CAAC,IAAI,CAAC;IAC/B,CAAC;CACJ,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,KAA2C,EAAE,EAAE;IAC/D,MAAM,QAAQ,GAAG,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7E,IAAI,eAAe,IAAI,QAAQ,EAAE;QAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC9C,IAAI,SAAS,GAAc;YACvB,IAAI,EAAE,OAAO;YACb,cAAc,EAAE,QAAQ;YACxB,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;SAC9B,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC1B;AACL,CAAC,CAAC;AAEF,SAAgB,MAAM,CAAC,MAAqE;IACxF,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,EAAE;QACjB,MAAM,GAAG,eAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,CAAC;QAC5D,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,yBAAc,CAAC,WAAW,CAAC;QACvE,4BAAO,CAAC,SAAS,CAAuB,SAAS,EAAE,UAAU,EAAE,+BAAU,CAAC,CAAC;KAC9E;AACL,CAAC;AAND,wBAMC;AAED,SAAgB,OAAO;IACnB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAC/C,CAAC;AAFD,0BAEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\n\r\nimport { Logger, LogRecord, logs, SeverityNumber } from \"@opentelemetry/api-logs\";\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\nimport { winston } from \"diagnostic-channel-publishers\";\r\nimport { InstrumentationConfig } from \"@opentelemetry/instrumentation\";\r\n\r\n\r\nlet logger: Logger;\r\nlet logSendingLevel: SeverityNumber;\r\n\r\nconst winstonToAILevelMap: { [key: string]: (og: string) => number } = {\r\n    syslog(og: string) {\r\n        const map: { [key: string]: number } = {\r\n            emerg: SeverityNumber.FATAL3,\r\n            alert: SeverityNumber.FATAL2,\r\n            crit: SeverityNumber.FATAL,\r\n            error: SeverityNumber.ERROR,\r\n            warning: SeverityNumber.WARN,\r\n            notice: SeverityNumber.INFO2,\r\n            info: SeverityNumber.INFO,\r\n            debug: SeverityNumber.DEBUG,\r\n        };\r\n\r\n        return map[og] === undefined ? SeverityNumber.INFO : map[og];\r\n    },\r\n    npm(og: string) {\r\n        const map: { [key: string]: number } = {\r\n            error: SeverityNumber.ERROR,\r\n            warn: SeverityNumber.WARN,\r\n            info: SeverityNumber.INFO,\r\n            http: SeverityNumber.DEBUG3,\r\n            verbose: SeverityNumber.DEBUG2,\r\n            debug: SeverityNumber.DEBUG,\r\n            silly: SeverityNumber.TRACE,\r\n        };\r\n\r\n        return map[og] === undefined ? SeverityNumber.INFO : map[og];\r\n    },\r\n    unknown(og: string) {\r\n        return SeverityNumber.INFO;\r\n    },\r\n};\r\n\r\nconst subscriber = (event: IStandardEvent<winston.IWinstonData>) => {  \r\n    const severity = winstonToAILevelMap[event.data.levelKind](event.data.level);\r\n    if (logSendingLevel <= severity) {\r\n        const message = event.data.message.toString();\r\n        let logRecord: LogRecord = {\r\n            body: message,\r\n            severityNumber: severity,\r\n            attributes: event.data.meta\r\n        };\r\n        logger.emit(logRecord);\r\n    }\r\n};\r\n\r\nexport function enable(config?: InstrumentationConfig & { logSendingLevel?: SeverityNumber }) {\r\n    if (config?.enabled) {\r\n        logger = logs.getLogger(\"ApplicationInsightsConsoleLogger\");\r\n        logSendingLevel = config.logSendingLevel || SeverityNumber.UNSPECIFIED;\r\n        channel.subscribe<winston.IWinstonData>(\"winston\", subscriber, trueFilter);\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"winston\", subscriber);\r\n}\r\n"]}